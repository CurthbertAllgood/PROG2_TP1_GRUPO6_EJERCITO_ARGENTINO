@startuml
top to bottom direction

' ===== ENUMERACIONES =====
enum CuerposEjercito {
  INFANTERIA
  ARTILLERIA
  ARMADA
}

' ===== CLASES MILITAR Y USUARIOS =====
abstract class Militar {

    -cuerpo: Cuerpo
    -compania: Compania
    -cuartel: Cuartel
    -serviciosRealizados: List<ServicioRealizado>
}

class Soldado
class Suboficial
class Oficial
Militar <|-- Soldado
Militar <|-- Suboficial
Militar <|-- Oficial

class Civil{

}

class Limpieza extends Servicio
class Mantenimiento extends Servicio

class Usuario {
    -user: String
    -password: String
    -codigo: String
    -nombre: String
    -apellidos: String
    +login(): void
    }
Usuario --> Militar

Civil --|> Usuario

' ===== FÁBRICAS =====
interface UsuarioFactory {
    +crearUsuario(): Usuario
}

class MilitarFactory {
    +crearMilitar(grado: Grado): Militar
}
class UsuarioFactory {
    +crearUsuario(tipo: String, usuario: String, contrasena: String, militar: Militar): Usuario
}

' ===== RESTO DEL MODELO =====
class Cuerpo {
    -cuerpo: CuerposEjercito
    -codigo: String
    -denominacion: String
}
Cuerpo --> CuerposEjercito

class Compania {
    -numero: int
    -actividadPrincipal: String
    -soldados: List<Militar>
    -cuarteles: List<Cuartel>
}

class Cuartel {
    -codigo: String
    -nombre: String
    -ubicacion: String
    -companias: List<Compania>
}

class Servicio {
    -codigo: String
    -descripcion: String
}

class ServicioRealizado {
    -soldado: Militar
    -servicio: Servicio
    -fecha: LocalDate
}

' ===== INTERFACES =====
interface ConsultaSoldado {
    +consultarSoldado(codigo: String): void
}

interface ModificacionSoldado {
    +modificarSoldado(s: Soldado): void
}

interface AltaBajaSoldado {
    +crearSoldado(s: Soldado): void
    +eliminarSoldado(codigo: String): void
}

interface GestionCuartel {
    +crearCuartel(c: Cuartel): void
    +eliminarCuartel(codigo: String): void
    +modificarCuartel()cuartel: Cuartel): void
}

interface GestionCuerpo{
    +crearCuerpo(cuerpo: Cuerpo): void
    +eliminarCuerpo(numero: int): void
    +modificarCuerpo()cuerpo: Cuerpo): void
}

interface GestionCompania {
    +crearCompania(c: Compania): void
    +eliminarCompania(numero: int): void
}

interface GestionServicio {
    +crearServicio(s: Servicio): void
    +eliminarServicio(codigo: String): void
}

' ===== IMPLEMENTACIONES POR ROL =====
class OperacionesSoldado implements ConsultaSoldado
class OperacionesSuboficial implements ConsultaSoldado, ModificacionSoldado
class OperacionesOficial implements ConsultaSoldado, AltaBajaSoldado, ModificacionSoldado, GestionCuartel, GestionCompania, GestionServicio,GestionCuerpo

' ===== COMMAND =====
interface Command {
    +execute(): void
}
class CrearSoldadoCommand implements Command {
    -s: Soldado
    -sistema: AltaBajaSoldado
    +execute(): void
}

class CrearServicioCommand implements Command{
    -servicio: Servicio
    -sistema: GestionServicio
    +execute(): void
}

class CrearCuerpoCommand implements Command {
    -c: Cuerpo
    -sistema: GestionCuerpo
    +execute(): void
}

class CrearCuartelCommand implements Command {
    -c: Cuartel
    -sistema: GestionCuartel
    +execute(): void
}
class CrearCompaniaCommand implements Command {
    -c: Compania
    -sistema: GestionCompania
    +execute(): void
}
class Invoker {
    -commands: List<Command>
    +addCommand(c: Command): void
    +executeAll(): void
}
Invoker --> Command
CrearSoldadoCommand --> AltaBajaSoldado
CrearCuartelCommand --> GestionCuartel
CrearCompaniaCommand --> GestionCompania
CrearCuerpoCommand --> GestionCuerpo
CrearServicioCommand --> GestionServicio
' ===== MENÚ DE CONSOLA =====
class MenuConsola {
    -invoker: Invoker
    -scanner: Scanner
    -usuario: Usuario
    +mostrar(): void
    -ejecutar(opcion: int): boolean
}
MenuConsola --> Invoker
MenuConsola --> Usuario
MenuConsola ..> ConsultaSoldado
MenuConsola ..> AltaBajaSoldado
MenuConsola ..> ModificacionSoldado
MenuConsola ..> GestionCuartel
MenuConsola ..> GestionCompania
MenuConsola ..> GestionServicio
MenuConsola ..> GestionCuerpo
MenuConsola ..> UsuarioFactory : crearUsuario()
MenuConsola ..> MilitarFactory : crearMilitar()

' ===== PERSISTENCIA =====
interface Persistencia<T> {
    +guardar(entidad: T): void
    +cargar(): List<T>
}
class PersistenciaTextoSoldado implements Persistencia<Soldado> {
    +guardar(entidad: Soldado): void
    +cargar(): List<Soldado>
}

' ===== RELACIONES =====
Militar --> Cuerpo : pertenece
Militar --> Compania : tiene
Militar --> Cuartel
Militar --> "*" ServicioRealizado
ServicioRealizado --> Servicio
Compania --> "*" Militar
Compania --> "*" Cuartel
Cuartel --> "*" Compania

@enduml
